{% extends "base.html" %}

{% block title %}イベント費 - {% if expense_id %}編集{% else %}新規登録{% endif %}{% endblock %}
{% block page_title %}イベント費 - {% if expense_id %}編集{% else %}新規登録{% endif %}{% endblock %}

{% block content %}
<div class="card">
    <div class="card-header">
        <h3 class="card-title">
            {% if expense_id %}
                イベント費編集 <span class="badge badge-secondary">#{{ expense_id }}</span>
            {% else %}
                イベント費新規登録
            {% endif %}
        </h3>
        <a href="/expenses/events" class="btn btn-secondary btn-sm">
            <i class="material-icons">arrow_back</i> 一覧に戻る
        </a>
    </div>
    <div class="card-body">
        <form id="eventExpenseForm">
            <input type="hidden" name="id" value="{{ expense_id or '' }}">
            
            <div class="form-group">
                <label class="form-label">イベント名 <span class="text-danger">*</span></label>
                <input type="text" name="name" class="form-control" placeholder="例：結婚式、車購入" required>
            </div>
            
            <div class="form-group">
                <label class="form-label">説明</label>
                <input type="text" name="description" class="form-control" placeholder="詳細説明（任意）">
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">開始年 <span class="text-danger">*</span></label>
                        <select name="start_year" class="form-control" required>
                            <!-- JavaScript で動的に生成 -->
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">終了年 <span class="text-danger">*</span></label>
                        <select name="end_year" class="form-control" required>
                            <!-- JavaScript で動的に生成 -->
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label class="form-label">イベントカテゴリ <span class="text-danger">*</span></label>
                <select name="category" class="form-control" required>
                    <option value="">選択してください</option>
                    <option value="結婚">結婚</option>
                    <option value="出産">出産</option>
                    <option value="車">車</option>
                    <option value="引越">引越</option>
                    <option value="介護">介護</option>
                    <option value="葬儀">葬儀</option>
                    <option value="旅行">旅行</option>
                    <option value="その他">その他</option>
                </select>
            </div>
            
            <div class="form-group">
                <label class="form-label">費用総額（万円） <span class="text-danger">*</span></label>
                <input type="number" name="amount" class="form-control" placeholder="100" min="0" step="1" required>
                <small class="form-text text-muted">イベントにかかる総費用</small>
            </div>
            
            <!-- 繰り返し設定 -->
            <h5 class="mt-4 mb-3">繰り返し設定</h5>
            
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="is_recurring" name="is_recurring" onchange="toggleRecurrenceFields()">
                    <label class="form-check-label" for="is_recurring">
                        定期的に繰り返すイベント
                    </label>
                </div>
            </div>
            
            <div id="recurrence-fields" style="display: none;">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">繰り返し間隔（年）</label>
                            <input type="number" name="recurrence_interval" class="form-control" placeholder="1" min="1" step="1" value="1">
                            <small class="form-text text-muted">何年おきに繰り返すか</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">繰り返し回数</label>
                            <input type="number" name="recurrence_count" class="form-control" placeholder="1" min="0" step="1" value="1">
                            <small class="form-text text-muted">0を入力すると無制限</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-group mt-4">
                <div class="row">
                    <div class="col-md-6">
                        <a href="/expenses/events" class="btn btn-secondary" id="cancelButton">キャンセル</a>
                        <button type="submit" class="btn btn-primary" id="submitButton">保存</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- FAB -->
<div class="form-fab-container" id="fabContainer">
    <a href="/expenses/events" class="fab fab-cancel" id="cancelFabButton">
        <i class="material-icons">close</i>
    </a>
    <button type="button" class="fab fab-add" id="formFabButton" onclick="submitFormViaFab()">
        <i class="material-icons">save</i>
    </button>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 年度セレクトボックスを初期化
    initializeYearSelects();
    
    // 編集モードの場合はデータを読み込み
    const expenseId = document.querySelector('[name="id"]').value;
    if (expenseId) {
        loadExpenseData(expenseId);
    }
    
    // フォーム送信イベント設定
    setupFormHandler();
});

// 繰り返し設定の表示切り替え
function toggleRecurrenceFields() {
    const isRecurringCheckbox = document.getElementById('is_recurring');
    const recurrenceFields = document.getElementById('recurrence-fields');
    
    if (isRecurringCheckbox.checked) {
        recurrenceFields.style.display = 'block';
    } else {
        recurrenceFields.style.display = 'none';
        // チェックを外した場合は値をリセット
        document.querySelector('[name="recurrence_interval"]').value = '1';
        document.querySelector('[name="recurrence_count"]').value = '1';
    }
}

// フォーム送信イベント設定
function setupFormHandler() {
    const form = document.getElementById('eventExpenseForm');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            await handleFormSubmit(this);
        });
    }
}

// フォーム送信処理
async function handleFormSubmit(form) {
    if (!validateRequired(form)) {
        return;
    }
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // 数値変換（万円を円に変換）
    data.amount = (parseFloat(data.amount) || 0) * 10000;
    
    data.start_year = parseInt(data.start_year) || 2024;
    data.end_year = parseInt(data.end_year) || 2050;
    
    // 繰り返し設定
    data.is_recurring = document.getElementById('is_recurring').checked;
    if (data.is_recurring) {
        data.recurrence_interval = parseInt(data.recurrence_interval) || 1;
        data.recurrence_count = parseInt(data.recurrence_count) || 1;
    } else {
        data.recurrence_interval = 1;
        data.recurrence_count = 1;
    }
    
    const isUpdate = data.id && data.id !== '';
    const method = isUpdate ? 'PUT' : 'POST';
    const messageType = isUpdate ? '更新' : '登録';
    
    // 送信ボタンを無効化してローディング状態にする
    const submitButton = form.querySelector('button[type="submit"]');
    const submitText = submitButton.querySelector('.submit-text');
    const originalText = submitText.textContent;
    
    submitButton.disabled = true;
    submitText.textContent = '処理中...';
    
    try {
        const response = await fetch('/api/event-expenses', {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast(`イベント費を${messageType}しました`, 'success');
            // 一覧ページに戻る
            setTimeout(() => {
                window.location.href = '/expenses/events';
            }, 1000);
        } else {
            showToast(result.message || `イベント費の${messageType}に失敗しました`, 'error');
        }
    } catch (error) {
        console.error('Error submitting form:', error);
        showToast(`イベント費の${messageType}に失敗しました`, 'error');
    } finally {
        submitButton.disabled = false;
        submitText.textContent = originalText;
    }
}

// 編集時のデータ読み込み
async function loadExpenseData(expenseId) {
    try {
        const response = await fetch('/api/event-expenses');
        const expenses = await response.json();
        const expense = expenses.find(item => item.id == expenseId);
        
        if (expense) {
            // フォームに値を設定（円を万円に変換）
            document.querySelector('[name="name"]').value = expense.name || '';
            document.querySelector('[name="description"]').value = expense.description || '';
            document.querySelector('[name="start_year"]').value = expense.start_year;
            document.querySelector('[name="end_year"]').value = expense.end_year;
            document.querySelector('[name="category"]').value = expense.category;
            document.querySelector('[name="amount"]').value = (expense.amount / 10000).toFixed(0);
            
            // 繰り返し設定
            if (expense.is_recurring) {
                document.getElementById('is_recurring').checked = true;
                document.querySelector('[name="recurrence_interval"]').value = expense.recurrence_interval || 1;
                document.querySelector('[name="recurrence_count"]').value = expense.recurrence_count || 1;
                toggleRecurrenceFields();
            }
        }
    } catch (error) {
        console.error('Error loading expense data:', error);
        showToast('データの読み込みに失敗しました', 'error');
    }
}
</script>
{% endblock %}
