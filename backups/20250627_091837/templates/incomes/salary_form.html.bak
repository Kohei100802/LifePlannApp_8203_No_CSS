{% extends "base.html" %}

{% block title %}給与収入 - {% if income_id %}編集{% else %}新規登録{% endif %}{% endblock %}
{% block page_title %}給与収入 - {% if income_id %}編集{% else %}新規登録{% endif %}{% endblock %}

{% block content %}
<div class="card">
    <div class="card-header">
        <h3 class="card-title">
            {% if income_id %}
                給与収入編集 <span class="badge badge-secondary">#{{ income_id }}</span>
            {% else %}
                給与収入新規登録
            {% endif %}
        </h3>
        <a href="/incomes/salary" class="btn btn-secondary btn-sm">
            <i class="material-icons">arrow_back</i> 一覧に戻る
        </a>
    </div>
    <div class="card-body">
        <form id="salaryIncomeForm">
            <input type="hidden" name="id" value="{{ income_id or '' }}">
            
            <div class="form-group">
                <label class="form-label">項目名 <span class="text-danger">*</span></label>
                <input type="text" name="name" class="form-control" placeholder="例：本業給与" required>
            </div>
            
            <div class="form-group">
                <label class="form-label">説明</label>
                <input type="text" name="description" class="form-control" placeholder="詳細説明（任意）">
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">開始年 <span class="text-danger">*</span></label>
                        <select name="start_year" class="form-control" required>
                            <!-- JavaScript で動的に生成 -->
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">終了年 <span class="text-danger">*</span></label>
                        <select name="end_year" class="form-control" required>
                            <!-- JavaScript で動的に生成 -->
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">月額給与（万円） <span class="text-danger">*</span></label>
                        <input type="number" name="monthly_amount" class="form-control" placeholder="30" min="0" step="0.1" required>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="form-label">年間ボーナス（万円）</label>
                        <input type="number" name="annual_bonus" class="form-control" placeholder="100" min="0" step="0.1">
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label class="form-label">昇給率（年率%）</label>
                <input type="number" name="salary_increase_rate" class="form-control" placeholder="3.0" min="0" max="20" step="0.1" value="3.0">
                <small class="form-text text-muted">年間の給与上昇率を設定してください</small>
            </div>
            
            <!-- 上限設定 -->
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="has_cap" name="has_cap" onchange="toggleCapInputs()">
                    <label class="form-check-label" for="has_cap">
                        給与に上限を設定する
                    </label>
                </div>
            </div>
            
            <div id="cap-settings" class="cap-settings" style="display: none;">
                <div class="form-group">
                    <label class="form-label">年間収入上限（万円）</label>
                    <input type="number" name="annual_income_cap" class="form-control" placeholder="1000" min="0" step="0.1">
                    <small class="form-text text-muted">年間の総収入（月給×12＋ボーナス）の上限額</small>
                </div>
            </div>
            
            <div class="form-group mt-4">
                <div class="row">
                    <div class="col-md-6">
                        <a href="/incomes/salary" class="btn btn-secondary" id="cancelButton">キャンセル</a>
                        <button type="submit" class="btn btn-primary" id="submitButton">保存</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- FAB -->
<div class="form-fab-container" id="fabContainer">
    <a href="/incomes/salary" class="fab-button cancel" id="cancelFabButton">
        <i class="material-icons">close</i>
    </a>
    <button type="button" class="fab-button submit" id="formFabButton" onclick="submitFormViaFab()">
        <i class="material-icons">save</i>
    </button>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 年度セレクトボックスを初期化
    initializeYearSelects();
    
    // 編集モードの場合はデータを読み込み
    const incomeId = document.querySelector('[name="id"]').value;
    if (incomeId) {
        loadIncomeData(incomeId);
    }
    
    // フォーム送信イベント設定
    setupFormHandler();
    
    // フローティングボタンの初期設定
    setupFormFab();
});

// 上限設定の表示切り替え
function toggleCapInputs() {
    const hasCapCheckbox = document.getElementById('has_cap');
    const capSettings = document.getElementById('cap-settings');
    
    if (hasCapCheckbox.checked) {
        capSettings.style.display = 'block';
    } else {
        capSettings.style.display = 'none';
        // チェックを外した場合は値をクリア
        document.querySelector('[name="annual_income_cap"]').value = '';
    }
}

// フォーム送信イベント設定
function setupFormHandler() {
    const salaryForm = document.getElementById('salaryIncomeForm');
    if (salaryForm) {
        salaryForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await handleFormSubmit(this);
        });
    }
}

// フォーム送信処理
async function handleFormSubmit(form) {
    if (!validateRequired(form)) {
        return;
    }
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // 数値変換（万円を円に変換）
    data.monthly_amount = (parseFloat(data.monthly_amount) || 0) * 10000;
    data.annual_bonus = (parseFloat(data.annual_bonus) || 0) * 10000;
    data.annual_amount = data.monthly_amount * 12 + data.annual_bonus;
    
    // 上限設定
    data.has_cap = document.getElementById('has_cap').checked;
    if (data.has_cap) {
        data.annual_income_cap = (parseFloat(data.annual_income_cap) || 0) * 10000;
    } else {
        data.annual_income_cap = 0;
    }
    
    data.start_year = parseInt(data.start_year) || 2024;
    data.end_year = parseInt(data.end_year) || 2050;
    data.salary_increase_rate = parseFloat(data.salary_increase_rate) || 3.0;
    
    const isUpdate = data.id && data.id !== '';
    const method = isUpdate ? 'PUT' : 'POST';
    const messageType = isUpdate ? '更新' : '登録';
    
    // 送信ボタンを無効化してローディング状態にする
    const submitButton = form.querySelector('button[type="submit"]');
    const submitText = submitButton.querySelector('.submit-text');
    const originalText = submitText.textContent;
    
    submitButton.disabled = true;
    submitText.textContent = '処理中...';
    
    try {
        const response = await fetch('/api/salary-incomes', {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            submitText.textContent = '完了！';
            showToast(`給与収入を${messageType}しました`, 'success');
            // 一覧ページに戻る（高速化・アニメーション付き）
            document.body.style.opacity = '0.8';
            setTimeout(() => {
                window.location.href = '/incomes/salary';
            }, 300);
        } else {
            submitButton.disabled = false;
            submitText.textContent = originalText;
            showToast(`給与収入の${messageType}に失敗しました`, 'error');
        }
    } catch (error) {
        console.error('給与収入 submission error:', error);
        submitButton.disabled = false;
        submitText.textContent = originalText;
        showToast(`給与収入の${messageType}に失敗しました`, 'error');
    }
}

// 編集データ読み込み
async function loadIncomeData(incomeId) {
    try {
        const incomes = await apiCall('/api/salary-incomes');
        const income = incomes.find(i => i.id === parseInt(incomeId));
        if (!income) {
            showToast('データが見つかりません', 'error');
            return;
        }
        
        // フォームに値を設定（万円表示に変換）
        const form = document.getElementById('salaryIncomeForm');
        form.querySelector('[name="name"]').value = income.name;
        form.querySelector('[name="description"]').value = income.description || '';
        form.querySelector('[name="start_year"]').value = income.start_year;
        form.querySelector('[name="end_year"]').value = income.end_year;
        form.querySelector('[name="monthly_amount"]').value = ((income.monthly_amount || 0) / 10000).toFixed(1);
        form.querySelector('[name="annual_bonus"]').value = ((income.annual_bonus || 0) / 10000).toFixed(1);
        form.querySelector('[name="salary_increase_rate"]').value = income.salary_increase_rate || 3.0;
        
        // 上限設定
        const hasCap = income.has_cap || false;
        document.getElementById('has_cap').checked = hasCap;
        
        if (hasCap) {
            document.getElementById('cap-settings').style.display = 'block';
            form.querySelector('[name="annual_income_cap"]').value = ((income.annual_income_cap || 0) / 10000).toFixed(1);
        }
        
    } catch (error) {
        console.error('Error loading income for edit:', error);
        showToast('編集データの読み込みに失敗しました', 'error');
    }
}


</script>
{% endblock %} 